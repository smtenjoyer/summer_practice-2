# Имя рабочего процесса, отображаемое на GitHub Actions
name: Build and Test Qt Project on Linux (Robust Apt Install)

# События, которые запускают этот рабочий процесс
on:
  push:
    branches: [ main, master ] # Запуск при коммитах в ветки main или master
  pull_request:
    branches: [ main, master ] # Запуск при пулл-реквестах в ветки main или master

# Определяем задачи (jobs)
jobs:
  build_linux:
    # Операционная система, на которой будет выполняться задача
    runs-on: ubuntu-latest # Используем последнюю версию Ubuntu LTS (сейчас это 24.04 Noble)

    # Шаги, которые будут выполняться
    steps:
    - name: Checkout Repository # Шаг 1: Клонирование вашего репозитория
      uses: actions/checkout@v4

    - name: Configure Repositories and Install Qt/Build Tools (via Apt for Ubuntu 24.04) # Шаг 2: Настройка репозиториев и установка Qt/инструментов
      run: |
        echo "Updating apt packages..."
        sudo apt update -y
        
        # Добавляем репозиторий 'universe', где часто находятся dev-пакеты Qt
        echo "Adding 'universe' repository..."
        sudo apt install -y software-properties-common # Убедимся, что инструмент для добавления репозиториев установлен
        sudo add-apt-repository universe -y # Добавляем universe репозиторий
        
        echo "Re-updating apt packages after adding repository..."
        sudo apt update -y # Обновляем список пакетов после добавления репозитория
        
        echo "Installing build essentials and Qt5 libraries for Ubuntu 24.04..."
        # build-essential для компилятора g++ и make
        # qt5-qmake для генерации Makefile из .pro файлов
        # libqt5core5-dev, libqt5gui5-dev, libqt5widgets5-dev, libqt5network5-dev - основные модули Qt5
        # (core, gui, widgets, network). Теперь они должны быть доступны после добавления 'universe'.
        # libgl1-mesa-dev - для поддержки OpenGL, часто требуется для графических Qt-приложений
        sudo apt install -y build-essential qt5-qmake libqt5core5-dev libqt5gui5-dev libqt5widgets5-dev libqt5network5-dev libgl1-mesa-dev

        echo "Installed Qt and build tools."

    - name: Configure Qt Projects # Шаг 3: Настройка проектов с помощью qmake
      run: |
        echo "Configuring server project..."
        cd server
        qmake server.pro
        cd ..

        echo "Configuring client project..."
        cd client
        qmake client.pro
        cd ..

    - name: Build Server # Шаг 4: Сборка серверного приложения
      run: |
        echo "Building server..."
        cd server
        make -j$(nproc)
        mv server ../server_app
        cd ..

    - name: Build Client # Шаг 5: Сборка клиентского приложения
      run: |
        echo "Building client..."
        cd client
        make -j$(nproc)
        mv client ../client_app
        cd ..

    - name: Verify Executables # Шаг 6: Проверка наличия исполняемых файлов
      run: |
        echo "Verifying compiled executables..."
        ls -l
        if [ -f server_app ]; then
          echo "Server application (server_app) found."
        else
          echo "Server application (server_app) NOT found!"
          exit 1
        fi
        if [ -f client_app ]; then
          echo "Client application (client_app) found."
        else
          echo "Client application (client_app) NOT found!"
          exit 1
        fi

    # - name: Run Basic Test (Optional)
    #   run: |
    #     echo "Attempting to run server and client..."
    #     ./server_app &
    #     SERVER_PID=$!
    #     sleep 2
    #     ./client_app "testuser" || true
    #     sleep 1
    #     kill $SERVER_PID || true
    #     echo "Server stopped."

    - name: Upload Build Artifacts (Optional) # Шаг 7 (Опционально): Сохранение скомпилированных файлов как артефактов
      uses: actions/upload-artifact@v4
      with:
        name: Qt_Apps_Linux_Build
        path: |
          ./client_app
          ./server_app