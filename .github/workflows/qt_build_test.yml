# Имя рабочего процесса, отображаемое на GitHub Actions
name: Build and Test Qt Project on Linux (Direct Qt Install)

# События, которые запускают этот рабочий процесс
on:
  push:
    branches: [ main, master ] # Запуск при коммитах в ветки main или master
  pull_request:
    branches: [ main, master ] # Запуск при создании/обновлении Pull Request в 'main' или 'master'

# Определяем задачи (jobs)
jobs:
  build_linux:
    # Операционная система, на которой будет выполняться задача
    runs-on: ubuntu-latest # Используем последнюю версию Ubuntu LTS

    # Шаги, которые будут выполняться
    steps:
    - name: Checkout Repository # Шаг 1: Клонирование вашего репозитория
      uses: actions/checkout@v4

    - name: Install Build Essentials and Dependencies # Шаг 2: Установка базовых инструментов и зависимостей
      run: |
        echo "Updating apt packages..."
        sudo apt update -y
        echo "Installing build essentials and other core libraries..."
        sudo apt install -y build-essential libgl1-mesa-dev # libgl1-mesa-dev для поддержки OpenGL

    - name: Download and Install Qt # Шаг 3: Скачивание и установка Qt напрямую
      run: |
        # Скачиваем официальный инсталлятор Qt Online Installer
        wget https://download.qt.io/official_releases/qt/5.15/5.15.2/qt-opensource-linux-x64-5.15.2.run -O qt_installer.run
        chmod +x qt_installer.run # Делаем файл исполняемым

        # Создаем файл ответов для автоматической установки
        # Устанавливаем Qt 5.15.2 GCC 64-bit в папку /opt/Qt
        # --compact отвечает за установку только необходимых модулей, указанных далее.
        # Это более компактный способ.
        cat << EOF > installer_script.qs
        function Controller() {
            installer.autoRejectMessageBoxes();
            installer.installationFinished.connect(function() {
                gui.clickButton(buttons.Next);
            })
        }
        Controller.prototype.WelcomePageCallback = function() {
            gui.clickButton(buttons.Next);
        }
        Controller.prototype.CredentialsPageCallback = function() {
            // Если требуется вход в аккаунт Qt, можно добавить данные здесь, но для Open Source обычно не нужно.
            gui.clickButton(buttons.Next);
        }
        Controller.prototype.IntroductionPageCallback = function() {
            gui.clickButton(buttons.Next);
        }
        Controller.prototype.TargetDirectoryPageCallback = function() {
            installer.setValue("TargetDirectory", "/opt/Qt"); # Директория установки Qt
            gui.clickButton(buttons.Next);
        }
        Controller.prototype.ComponentSelectionPageCallback = function() {
            var widget = gui.currentPageWidget();
            widget.deselectAll(); # Сначала отменяем выбор всех компонентов

            # Выбираем только необходимые компоненты:
            # - qt.qt5.5152.gcc_64 (базовый комплект Qt для GCC 64-бит)
            # - qt.qt5.5152.qtbase (включает core, gui, widgets, network)
            widget.selectComponent("qt.qt5.5152.gcc_64");
            # widget.selectComponent("qt.qt5.5152.qtnetwork"); # Обычно уже входит в qtbase, но можно добавить для ясности
            # Добавьте другие модули, если они нужны вашему проекту, например:
            # widget.selectComponent("qt.qt5.5152.qtdeclarative"); # Для QML
            # widget.selectComponent("qt.qt5.5152.qtsvg"); # Для SVG

            gui.clickButton(buttons.Next);
        }
        Controller.prototype.LicenseAgreementPageCallback = function() {
            gui.currentPageWidget().AcceptLicenseAgreementRadioButton.setChecked(true);
            gui.clickButton(buttons.Next);
        }
        Controller.prototype.ReadyForInstallationPageCallback = function() {
            gui.clickButton(buttons.Next);
        }
        Controller.prototype.FinishedPageCallback = function() {
            gui.clickButton(buttons.Finish);
        }
        EOF

        # Запускаем установщик Qt в безмолвном режиме с использованием файла ответов
        ./qt_installer.run --script installer_script.qs

        # Добавляем Qt в PATH, чтобы qmake и другие утилиты были доступны
        echo "/opt/Qt/5.15.2/gcc_64/bin" >> $GITHUB_PATH
        # Также для корректной работы библиотек
        echo "/opt/Qt/5.15.2/gcc_64/lib" >> $LD_LIBRARY_PATH
        export LD_LIBRARY_PATH="/opt/Qt/5.15.2/gcc_64/lib:$LD_LIBRARY_PATH"

    - name: Configure Qt Projects # Шаг 4: Настройка проектов с помощью qmake
      run: |
        echo "Configuring server project..."
        cd server
        qmake server.pro
        cd .. # Возвращаемся в корневую папку

        echo "Configuring client project..."
        cd client
        qmake client.pro
        cd .. # Возвращаемся в корневую папку

    - name: Build Server # Шаг 5: Сборка серверного приложения
      run: |
        echo "Building server..."
        cd server
        make
        mv server ../server_app # Перемещаем скомпилированный бинарник на уровень выше и переименовываем
        cd ..

    - name: Build Client # Шаг 6: Сборка клиентского приложения
      run: |
        echo "Building client..."
        cd client
        make
        mv client ../client_app # Перемещаем скомпилированный бинарник на уровень выше и переименовываем
        cd ..

    - name: Verify Executables # Шаг 7: Проверка наличия исполняемых файлов
      run: |
        echo "Verifying compiled executables..."
        ls -l
        if [ -f server_app ]; then
          echo "Server application (server_app) found."
        else
          echo "Server application (server_app) NOT found!"
          exit 1
        fi
        if [ -f client_app ]; then
          echo "Client application (client_app) found."
        else
          echo "Client application (client_app) NOT found!"
          exit 1
        fi

    # - name: Run Basic Test (Optional) # Закомментированный шаг для базового запуска
    #   run: |
    #     echo "Attempting to run server and client..."
    #     ./server_app &
    #     SERVER_PID=$!
    #     sleep 2
    #     ./client_app "testuser" || true
    #     sleep 1
    #     kill $SERVER_PID || true
    #     echo "Server stopped."

    - name: Upload Build Artifacts (Optional) # Шаг 8 (Опционально): Сохранение скомпилированных файлов
      uses: actions/upload-artifact@v4
      with:
        name: Qt_Apps_Linux_Build
        path: |
          ./client_app
          ./server_app