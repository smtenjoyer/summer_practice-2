# Имя рабочего процесса, отображаемое на GitHub Actions
name: Build and Test Qt Project on Linux (LD_LIBRARY_PATH Fix)

# События, которые запускают этот рабочий процесс
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Определяем задачи (jobs)
jobs:
  build_linux:
    runs-on: ubuntu-latest # Запускаем на стандартной машине GitHub Actions
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Build Essentials and Dependencies
      run: |
        echo "Updating apt packages..."
        sudo apt update -y
        echo "Installing build essentials and other core libraries..."
        sudo apt install -y build-essential libgl1-mesa-dev python3 python3-pip

    - name: Install Qt using aqtinstall
      run: |
        echo "Installing aqtinstall..."
        pip3 install aqtinstall

        echo "Installing Qt 5.15.2 for linux/gcc_64..."
        aqt install-qt linux desktop 5.15.2 gcc_64 --outputdir "$RUNNER_TEMP/Qt"

        # Правильно добавляем пути к переменным окружения для текущего шага.
        # Этот подход использует GITHUB_ENV для сохранения переменных между шагами.
        echo "QT_PATH=$RUNNER_TEMP/Qt/5.15.2/gcc_64" >> $GITHUB_ENV
        echo "PATH=$RUNNER_TEMP/Qt/5.15.2/gcc_64/bin:$PATH" >> $GITHUB_ENV
        
        # Корректное добавление к LD_LIBRARY_PATH
        # Используем подстановку по умолчанию, чтобы избежать "ambiguous redirect"
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$RUNNER_TEMP/Qt/5.15.2/gcc_64/lib" >> $GITHUB_ENV

        # Выведем PATH и LD_LIBRARY_PATH для отладки, они будут доступны в следующих шагах
        echo "PATH (after setting in GITHUB_ENV): $PATH"
        echo "LD_LIBRARY_PATH (after setting in GITHUB_ENV): $LD_LIBRARY_PATH"

    - name: Configure Qt Projects
      run: |
        echo "Configuring server project..."
        cd server
        qmake server.pro
        cd ..

        echo "Configuring client project..."
        cd client
        qmake client.pro
        cd ..

    - name: Build Server
      run: |
        echo "Building server..."
        cd server
        make -j$(nproc)
        mv server ../server_app
        cd ..

    - name: Build Client
      run: |
        echo "Building client..."
        cd client
        make -j$(nproc)
        mv client ../client_app
        cd ..

    - name: Verify Executables
      run: |
        echo "Verifying compiled executables..."
        ls -l
        if [ -f server_app ]; then
          echo "Server application (server_app) found."
        else
          echo "Server application (server_app) NOT found!"
          exit 1
        fi
        if [ -f client_app ]; then
          echo "Client application (client_app) found."
        else
          echo "Client application (client_app) NOT found!"
          exit 1
        fi

    # - name: Run Basic Test (Optional)
    #   run: |
    #     echo "Attempting to run server and client..."
    #     ./server_app &
    #     SERVER_PID=$!
    #     sleep 2
    #     ./client_app "testuser" || true
    #     sleep 1
    #     kill $SERVER_PID || true
    #     echo "Server stopped."

    - name: Upload Build Artifacts (Optional)
      uses: actions/upload-artifact@v4
      with:
        name: Qt_Apps_Linux_Build
        path: |
          ./client_app
          ./server_app